version: "3.7"

services:

  nginx-ssi:
    image: nginx
    volumes:
      - type: bind
        source: ./nginx/conf.d
        target: /etc/nginx/conf.d
      - type: bind
        source: ./nginx/ssi-snippets/
        target: /var/www/ssi-snippets
    expose:
      - "8080"
    ports:
      - "8080:8080"
    entrypoint: ""
    command:
      - /bin/sh
      - -ce
      - |
        echo "Run nginx in debug mode and foreground:"
        exec nginx-debug -g 'daemon off;'
    depends_on:
      - angular-app-a
      - angular-app-b
      - angular-app-c
      - angular-app-d

  angular-app-a:
    image: node:12.9.0
    user: "node"
    working_dir: /home/node/app
    # environment:
    #   - NODE_ENV=production
    volumes:
      - type: bind
        source: ./micro-frontends/angular-app-a/
        target: /home/node/app
    expose:
      - "8080"
    command:
      - /bin/sh
      - -ce
      - |
        npm install
        npm run with-nginx

  angular-app-b:
    image: node:12.9.0
    user: "node"
    working_dir: /home/node/app
    # environment:
    #   - NODE_ENV=production
    volumes:
      - type: bind
        source: ./micro-frontends/angular-app-b/
        target: /home/node/app
    expose:
      - "8080"
    command:
      - /bin/sh
      - -ce
      - |
        npm install
        npm run with-nginx

  angular-app-c:
    image: node:12.9.0
    user: "node"
    working_dir: /home/node/app
    # environment:
    #   - NODE_ENV=production
    volumes:
      - type: bind
        source: ./micro-frontends/angular-app-c/
        target: /home/node/app
    expose:
      - "8080"
    command:
      - /bin/sh
      - -ce
      - |
        npm install
        npm run with-nginx

  angular-app-d:
    image: node:12.9.0
    user: "node"
    working_dir: /home/node/app
    # environment:
    #   - NODE_ENV=production
    volumes:
      - type: bind
        source: ./micro-frontends/angular-app-d/
        target: /home/node/app
    expose:
      - "8080"
    command:
      - /bin/sh
      - -ce
      - |
        npm install
        npm run with-nginx

  postgres:
    image: postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    expose:
      - "5432"
    ports:
      - "5432:5432"

  keycloak-setup:
    image: docker/compose:1.24.1
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind
        source: ./docker-compose.yml
        target: /docker-compose.yml
      - type: bind
        source: ./.env
        target: /.env
    entrypoint: ""
    command:
      - /bin/sh
      - -ce
      - |
        docker-compose ps
        echo "wait for precondition..."
        ( docker-compose logs --follow --tail 2 keycloak & ) | grep -q 'Admin console listening'
        echo "precondition matched, continue..."

        echo "keycloak server state"
        docker-compose exec -T keycloak /opt/jboss/keycloak/bin/jboss-cli.sh --connect --command=":read-attribute(name=server-state)"

        docker-compose exec -T keycloak /opt/jboss/keycloak/bin/kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user admin --password admin
        docker-compose exec -T keycloak /opt/jboss/keycloak/bin/kcadm.sh create realms -s realm=demorealm -s enabled=true
        docker-compose exec -T keycloak /opt/jboss/keycloak/bin/kcadm.sh create roles -r demorealm -s name=user -s 'description=Regular user with limited set of permissions'
        docker-compose exec -T keycloak /opt/jboss/keycloak/bin/kcadm.sh create clients -r demorealm -s clientId=myapp -s enabled=true -s publicClient=true -s 'redirectUris=["http://localhost:8080/*"]' -s 'webOrigins=["http://localhost:8080"]'
        docker-compose exec -T keycloak /opt/jboss/keycloak/bin/kcadm.sh create users -r demorealm -s username=testuser -s enabled=true
        docker-compose exec -T keycloak /opt/jboss/keycloak/bin/kcadm.sh set-password -r demorealm --username testuser --new-password testuser
        docker-compose exec -T keycloak /opt/jboss/keycloak/bin/kcadm.sh add-roles -r demorealm --uusername testuser --rolename user
        docker-compose exec -T keycloak /opt/jboss/keycloak/bin/kcadm.sh create clients -r demorealm -s clientId=mybackend -s enabled=true -s serviceAccountsEnabled=true -s clientAuthenticatorType=client-secret -s secret=d0b8122f-8dfb-46b7-b68a-f5cc4e25d000

        echo "docker-compose service 'keycloak-setup' finished."
    depends_on:
      - keycloak

  keycloak:
    image: jboss/keycloak:7.0.0
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      PROXY_ADDRESS_FORWARDING: "true"
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
    expose:
      - "8080"
    ports:
      - "8081:8080"
    depends_on:
      - postgres
